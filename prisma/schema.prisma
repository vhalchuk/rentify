// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  properties        Property[] @relation("PropertyOwner")
  managedProperties Property[] @relation("PropertyManager")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id                    String         @id @default(cuid())
  name                  String
  status                PropertyStatus @default(NOT_RENTED)
  unregisteredOwnerName String? // Use this field when there's no registered owner
  registeredOwnerId     String? // Foreign key referencing User model
  registeredOwner       User?          @relation("PropertyOwner", fields: [registeredOwnerId], references: [id], onDelete: Cascade)
  managerId             String?
  manager               User?          @relation("PropertyManager", fields: [managerId], references: [id], onDelete: Cascade)
  expenses              Expense[]
  bookings              Booking[]
}

model Expense {
  id         String   @id @default(cuid())
  amount     Decimal
  createdAt  DateTime @default(now())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Booking {
  id           String      @id @default(cuid())
  amount       Decimal
  checkinDate  DateTime
  checkoutDate DateTime
  propertyId   String
  property     Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  bookingType  BookingType
  incomes      Income[]
}

model Income {
  id        String   @id @default(cuid())
  amount    Decimal
  createdAt DateTime @default(now())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

enum BookingType {
  UPFRONT
  LONG_TERM
}

enum PropertyStatus {
  RENTED
  NOT_RENTED
  NOT_AVAILABLE
}
